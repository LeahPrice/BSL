% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/semiparaKernelEstimate.R
\name{semiparaKernelEstimate}
\alias{semiparaKernelEstimate}
\title{Estimating the semi-parametric joint likelihood}
\usage{
semiparaKernelEstimate(ssy, ssx, kernel = "gaussian",
  methodCDF = c("KDE", "empirical")[1], shrinkage = NULL,
  penalty = NULL, log = TRUE)
}
\arguments{
\item{ssy}{The observed summary statisic.}

\item{ssx}{A matrix of the simulated summary statistics. The number of rows is the same
as the number of simulations per iteration.}

\item{kernel}{A character argument indicating the smoothing kernel to pass into
\code{density}. Only "gaussian" and "epanechnikov" are available. The default is "gaussian".}

\item{methodCDF}{A character argument indicating the method to estimate marginal CDF. The two
options are "KDE" and "empirical". The default, "KDE", uses the same bandwidth obtained in PDF
estimation. "empirical" automatically applies Winsorisation to trim samples. The threshold of
cut-off variable is \code{1/(4*n^0.25*sqrt(pi*log(n)))}.}

\item{penalty}{The penalty value to be used for the specified shrinkage method. Must be
between zero and one if the shrinkage method is 'Warton'.}

\item{log}{A logical argument indicating if the log of likelihood is given as the result.
The default is \code{TRUE}.}

\item{shrinage}{A character argument indicating which shrinkage method to be used on the
correlation matrix of the Gaussian copula. The default is \code{NULL}, which means no shrinkage
is used. Current options are 'glasso' for graphical lasso and 'Warton' for the ridge
regularisation method of Warton (2008).}
}
\value{
The estimated (log) likelihood value.
}
\description{
This function estimates the semi-parametric likelihood of An et al (2018).
Kernel density estimates are used for modelling each univariate marginal distribution, and the
dependence structure between summaries by are captured using a Gaussian copula.
}
\examples{
data(ma2)
y <- ma2$data # the observed data

# function that simulates an ma2 time series
simulate_ma2 <- function(theta, L = 50) {
   rand <- rnorm(L + 2)
   y <- rand[3 : (L+2)] + theta[1] * rand[2 : (L+1)] + theta[2] * rand[1 : L]
   return(y)
}

theta_true <- c(0.6, 0.2)
x <- matrix(0, 300, 50)
set.seed(100)
for(i in 1:300) x[i, ] <- simulate_ma2(theta_true)

# the default semi-parametric synthetic likelihood estimator of semiBSL
semiparaKernelEstimate(y, x)
# estimate the univariate CDF empirically instead of with kernel density estimation
semiparaKernelEstimate(y, x, methodCDF = 'empirical')
# using shrinkage on the covariance matrix of the Gaussian copula is also possible
semiparaKernelEstimate(y, x, shrinkage = 'Warton', penalty = 0.6)

}
\references{
An, Z., Nott, D. J. &  Drovandi, C. (2018). Robust Bayesian Synthetic Likelihood via
a Semi-Parametric Approach. \url{https://arxiv.org/abs/1809.05800}

Warton, D. I. (2008). Penalized Normal Likelihood and Ridge Regularization of Correlation and
Covariance Matrices, Journal of the American Statistical Association.
\url{https://www.tandfonline.com/doi/abs/10.1198/016214508000000021}
}
